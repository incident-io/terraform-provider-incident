package models

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/incident-io/terraform-provider-incident/internal/client"
	"github.com/samber/lo"
)

type AlertRouteResourceModel struct {
	ID        types.String `tfsdk:"id"`
	Name      types.String `tfsdk:"name"`
	Enabled   types.Bool   `tfsdk:"enabled"`
	IsPrivate types.Bool   `tfsdk:"is_private"`

	AlertSources     []AlertRouteAlertSourceModel     `tfsdk:"alert_sources"`
	ChannelConfig    []AlertRouteChannelConfigModel   `tfsdk:"channel_config"`
	ConditionGroups  IncidentEngineConditionGroups    `tfsdk:"condition_groups"`
	Expressions      IncidentEngineExpressions        `tfsdk:"expressions"`
	EscalationConfig *AlertRouteEscalationConfigModel `tfsdk:"escalation_config"`
	IncidentConfig   *AlertRouteIncidentConfigModel   `tfsdk:"incident_config"`
	IncidentTemplate *AlertRouteIncidentTemplateModel `tfsdk:"incident_template"`
}

type AlertRouteAlertSourceModel struct {
	AlertSourceID   types.String                  `tfsdk:"alert_source_id"`
	ConditionGroups IncidentEngineConditionGroups `tfsdk:"condition_groups"`
}

type AlertRouteChannelConfigModel struct {
	ConditionGroups IncidentEngineConditionGroups `tfsdk:"condition_groups"`
	MsTeamsTargets  *AlertRouteChannelTargetModel `tfsdk:"ms_teams_targets"`
	SlackTargets    *AlertRouteChannelTargetModel `tfsdk:"slack_targets"`
}

type AlertRouteChannelTargetModel struct {
	Binding           *IncidentEngineParamBinding `tfsdk:"binding"`
	ChannelVisibility types.String                `tfsdk:"channel_visibility"`
}

type AlertRouteEscalationConfigModel struct {
	AutoCancelEscalations types.Bool                        `tfsdk:"auto_cancel_escalations"`
	EscalationTargets     []AlertRouteEscalationTargetModel `tfsdk:"escalation_targets"`
}

type AlertRouteEscalationTargetModel struct {
	EscalationPaths *IncidentEngineParamBinding `tfsdk:"escalation_paths"`
	Users           *IncidentEngineParamBinding `tfsdk:"users"`
}

type AlertRouteIncidentConfigModel struct {
	AutoDeclineEnabled types.Bool                    `tfsdk:"auto_decline_enabled"`
	ConditionGroups    IncidentEngineConditionGroups `tfsdk:"condition_groups"`
	DeferTimeSeconds   types.Int64                   `tfsdk:"defer_time_seconds"`
	Enabled            types.Bool                    `tfsdk:"enabled"`
	GroupingKeys       []AlertRouteGroupingKey       `tfsdk:"grouping_keys"`
}

type AlertRouteGroupingKey struct {
	Reference types.String `tfsdk:"reference"`
}

type AlertRouteAutoGeneratedParamBinding struct {
	Autogenerated types.Bool                       `tfsdk:"autogenerated"`
	ArrayValue    types.List                       `tfsdk:"array_value"`
	Value         *IncidentEngineParamBindingValue `tfsdk:"value"`
}

func (b AlertRouteAutoGeneratedParamBinding) ToParamBinding() IncidentEngineParamBinding {
	// Convert from types.List to []IncidentEngineParamBindingValue
	var arrayValues []IncidentEngineParamBindingValue
	if !b.ArrayValue.IsNull() && !b.ArrayValue.IsUnknown() {
		// Extract values from the types.List
		elements := b.ArrayValue.Elements()
		for _, elem := range elements {
			if elemObj, ok := elem.(types.Object); ok {
				var pbv IncidentEngineParamBindingValue
				elemObj.As(context.Background(), &pbv, basetypes.ObjectAsOptions{})
				arrayValues = append(arrayValues, pbv)
			}
		}
	}

	// Return a param binding with the array value and possibly null value field
	return IncidentEngineParamBinding{
		ArrayValue: arrayValues,
		Value:      b.Value,
	}
}

func (b AlertRouteAutoGeneratedParamBinding) ToPayload() client.EngineParamBindingPayloadV2 {
	paramBinding := b.ToParamBinding()

	return paramBinding.ToPayload()
}

func (AlertRouteAutoGeneratedParamBinding) FromParamBinding(binding IncidentEngineParamBinding, autogenerated types.Bool) AlertRouteAutoGeneratedParamBinding {
	result := AlertRouteAutoGeneratedParamBinding{
		Autogenerated: autogenerated,
		Value:         binding.Value,
	}

	if len(binding.ArrayValue) > 0 {
		listValues, _ := types.ListValueFrom(
			context.Background(),
			types.ObjectType{
				AttrTypes: map[string]attr.Type{
					"literal":   types.StringType,
					"reference": types.StringType,
				},
			},
			binding.ArrayValue,
		)
		result.ArrayValue = listValues
	} else {
		result.ArrayValue = types.ListNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"literal":   types.StringType,
				"reference": types.StringType,
			},
		})
	}

	return result
}

func (AlertRouteAutoGeneratedParamBinding) FromParamBindingWithPlan(binding IncidentEngineParamBinding, autogenerated types.Bool, planBinding *AlertRouteAutoGeneratedParamBinding) AlertRouteAutoGeneratedParamBinding {
	result := AlertRouteAutoGeneratedParamBinding{
		Autogenerated: autogenerated,
		Value:         binding.Value,
	}

	arrayValues := []IncidentEngineParamBindingValue{}
	arrayValues = append(arrayValues, binding.ArrayValue...)

	if len(arrayValues) > 0 {
		listValues, _ := types.ListValueFrom(
			context.Background(),
			types.ObjectType{
				AttrTypes: map[string]attr.Type{
					"literal":   types.StringType,
					"reference": types.StringType,
				},
			},
			arrayValues,
		)
		result.ArrayValue = listValues
	} else {
		result.ArrayValue = types.ListNull(types.ObjectType{
			AttrTypes: map[string]attr.Type{
				"literal":   types.StringType,
				"reference": types.StringType,
			},
		})

		if planBinding != nil {
			if !planBinding.ArrayValue.IsNull() && !planBinding.ArrayValue.IsUnknown() &&
				len(planBinding.ArrayValue.Elements()) == 0 {
				result.ArrayValue = planBinding.ArrayValue
			}
		}
	}

	return result
}

type AlertRouteIncidentTemplateModel struct {
	CustomFields  []AlertRouteCustomFieldModel         `tfsdk:"custom_fields"`
	IncidentMode  *IncidentEngineParamBinding          `tfsdk:"incident_mode"`
	IncidentType  *IncidentEngineParamBinding          `tfsdk:"incident_type"`
	Name          *AlertRouteAutoGeneratedParamBinding `tfsdk:"name"`
	Severity      *AlertRouteSeverityModel             `tfsdk:"severity"`
	StartInTriage *IncidentEngineParamBinding          `tfsdk:"start_in_triage"`
	Summary       *AlertRouteAutoGeneratedParamBinding `tfsdk:"summary"`
	Workspace     *IncidentEngineParamBinding          `tfsdk:"workspace"`
}

type AlertRouteSeverityModel struct {
	MergeStrategy types.String                `tfsdk:"merge_strategy"`
	Binding       *IncidentEngineParamBinding `tfsdk:"binding"`
}

type AlertRouteCustomFieldModel struct {
	CustomFieldID types.String                `tfsdk:"custom_field_id"`
	Binding       *IncidentEngineParamBinding `tfsdk:"binding"`
	MergeStrategy types.String                `tfsdk:"merge_strategy"`
}

func (AlertRouteResourceModel) FromAPI(apiModel client.AlertRouteV2) AlertRouteResourceModel {
	return AlertRouteResourceModel{}.FromAPIWithPlan(apiModel, nil)
}

func (AlertRouteResourceModel) FromAPIWithPlan(apiModel client.AlertRouteV2, plan *AlertRouteResourceModel) AlertRouteResourceModel {
	result := AlertRouteResourceModel{}

	result.Expressions = IncidentEngineExpressions{}

	result.ID = types.StringValue(apiModel.Id)
	result.Name = types.StringValue(apiModel.Name)
	result.Enabled = types.BoolValue(apiModel.Enabled)
	result.IsPrivate = types.BoolValue(apiModel.IsPrivate)

	for _, alertSource := range apiModel.AlertSources {
		model := AlertRouteAlertSourceModel{
			AlertSourceID: types.StringValue(alertSource.AlertSourceId),
		}

		if alertSource.ConditionGroups != nil {
			model.ConditionGroups = IncidentEngineConditionGroups{}.FromAPI(alertSource.ConditionGroups)
		} else {
			model.ConditionGroups = IncidentEngineConditionGroups{}
		}

		result.AlertSources = append(result.AlertSources, model)
	}

	if len(apiModel.AlertSources) == 0 {
		result.AlertSources = []AlertRouteAlertSourceModel{}
	}

	for _, channelConfig := range apiModel.ChannelConfig {
		model := AlertRouteChannelConfigModel{}

		if channelConfig.ConditionGroups != nil {
			model.ConditionGroups = IncidentEngineConditionGroups{}.FromAPI(channelConfig.ConditionGroups)
		} else {
			model.ConditionGroups = IncidentEngineConditionGroups{}
		}

		if channelConfig.SlackTargets != nil {
			binding := IncidentEngineParamBinding{}.FromAPI(channelConfig.SlackTargets.Binding)
			model.SlackTargets = &AlertRouteChannelTargetModel{
				ChannelVisibility: types.StringValue(channelConfig.SlackTargets.ChannelVisibility),
				Binding:           &binding,
			}
		}

		if channelConfig.MsTeamsTargets != nil {
			binding := IncidentEngineParamBinding{}.FromAPI(channelConfig.MsTeamsTargets.Binding)
			model.MsTeamsTargets = &AlertRouteChannelTargetModel{
				ChannelVisibility: types.StringValue(channelConfig.MsTeamsTargets.ChannelVisibility),
				Binding:           &binding,
			}
		}

		result.ChannelConfig = append(result.ChannelConfig, model)
	}

	if len(apiModel.ChannelConfig) == 0 {
		result.ChannelConfig = []AlertRouteChannelConfigModel{}
	}

	if len(apiModel.ConditionGroups) > 0 {
		result.ConditionGroups = IncidentEngineConditionGroups{}.FromAPI(apiModel.ConditionGroups)
	} else {
		result.ConditionGroups = IncidentEngineConditionGroups{}
	}

	result.Expressions = IncidentEngineExpressions{}
	if len(apiModel.Expressions) > 0 {
		result.Expressions = IncidentEngineExpressions{}.FromAPI(apiModel.Expressions)
	}

	result.EscalationConfig = &AlertRouteEscalationConfigModel{
		AutoCancelEscalations: types.BoolValue(apiModel.EscalationConfig.AutoCancelEscalations),
		EscalationTargets:     []AlertRouteEscalationTargetModel{},
	}

	if apiModel.EscalationConfig.EscalationTargets != nil {
		for _, target := range apiModel.EscalationConfig.EscalationTargets {
			model := AlertRouteEscalationTargetModel{}

			if target.Users != nil {
				binding := IncidentEngineParamBinding{}.FromAPI(*target.Users)
				model.Users = &binding
			}

			if target.EscalationPaths != nil {
				binding := IncidentEngineParamBinding{}.FromAPI(*target.EscalationPaths)
				model.EscalationPaths = &binding
			}

			result.EscalationConfig.EscalationTargets = append(result.EscalationConfig.EscalationTargets, model)
		}
	}

	result.IncidentConfig = &AlertRouteIncidentConfigModel{
		AutoDeclineEnabled: types.BoolValue(apiModel.IncidentConfig.AutoDeclineEnabled),
		DeferTimeSeconds:   types.Int64Value(apiModel.IncidentConfig.DeferTimeSeconds),
		Enabled:            types.BoolValue(apiModel.IncidentConfig.Enabled),
		GroupingKeys:       []AlertRouteGroupingKey{},
	}

	for _, gk := range apiModel.IncidentConfig.GroupingKeys {
		groupingKey := AlertRouteGroupingKey{
			Reference: types.StringValue(gk.Reference),
		}

		result.IncidentConfig.GroupingKeys = append(result.IncidentConfig.GroupingKeys, groupingKey)
	}

	if apiModel.IncidentConfig.ConditionGroups != nil {
		result.IncidentConfig.ConditionGroups = IncidentEngineConditionGroups{}.FromAPI(apiModel.IncidentConfig.ConditionGroups)
	} else {
		result.IncidentConfig.ConditionGroups = IncidentEngineConditionGroups{}
	}

	result.IncidentTemplate = &AlertRouteIncidentTemplateModel{
		CustomFields: []AlertRouteCustomFieldModel{},
	}

	var planNameBinding *AlertRouteAutoGeneratedParamBinding = nil
	if plan != nil && plan.IncidentTemplate != nil && plan.IncidentTemplate.Name != nil {
		planNameBinding = plan.IncidentTemplate.Name
	}

	emptyListType := types.ObjectType{
		AttrTypes: map[string]attr.Type{
			"literal":   types.StringType,
			"reference": types.StringType,
		},
	}

	nameBinding := AlertRouteAutoGeneratedParamBinding{
		Autogenerated: types.BoolValue(apiModel.IncidentTemplate.Name.Autogenerated),
		ArrayValue:    types.ListNull(emptyListType),
	}

	if apiModel.IncidentTemplate.Name.Binding != nil {
		paramBinding := IncidentEngineParamBinding{}.FromAPI(*apiModel.IncidentTemplate.Name.Binding)
		nameBinding = AlertRouteAutoGeneratedParamBinding{}.FromParamBindingWithPlan(paramBinding, nameBinding.Autogenerated, planNameBinding)
	} else if planNameBinding != nil {
		nameBinding = AlertRouteAutoGeneratedParamBinding{}.FromParamBindingWithPlan(
			IncidentEngineParamBinding{},
			nameBinding.Autogenerated,
			planNameBinding,
		)
	}

	result.IncidentTemplate.Name = &nameBinding

	var planSummaryBinding *AlertRouteAutoGeneratedParamBinding = nil
	if plan != nil && plan.IncidentTemplate != nil && plan.IncidentTemplate.Summary != nil {
		planSummaryBinding = plan.IncidentTemplate.Summary
	}

	summaryBinding := AlertRouteAutoGeneratedParamBinding{
		Autogenerated: types.BoolValue(false),
		ArrayValue:    types.ListNull(emptyListType),
	}

	if apiModel.IncidentTemplate.Summary != nil {
		summaryBinding.Autogenerated = types.BoolValue(apiModel.IncidentTemplate.Summary.Autogenerated)

		if apiModel.IncidentTemplate.Summary.Binding != nil {
			paramBinding := IncidentEngineParamBinding{}.FromAPI(*apiModel.IncidentTemplate.Summary.Binding)
			summaryBinding = AlertRouteAutoGeneratedParamBinding{}.FromParamBindingWithPlan(paramBinding, summaryBinding.Autogenerated, planSummaryBinding)
		} else if planSummaryBinding != nil {
			summaryBinding = AlertRouteAutoGeneratedParamBinding{}.FromParamBindingWithPlan(
				IncidentEngineParamBinding{},
				summaryBinding.Autogenerated,
				planSummaryBinding,
			)
		}
	} else if planSummaryBinding != nil {
		summaryBinding = AlertRouteAutoGeneratedParamBinding{}.FromParamBindingWithPlan(
			IncidentEngineParamBinding{},
			summaryBinding.Autogenerated,
			planSummaryBinding,
		)
	}

	result.IncidentTemplate.Summary = &summaryBinding

	result.IncidentTemplate.Severity = &AlertRouteSeverityModel{
		MergeStrategy: types.StringValue("first-wins"),
	}

	if apiModel.IncidentTemplate.Severity != nil {
		result.IncidentTemplate.Severity.MergeStrategy = types.StringValue(string(apiModel.IncidentTemplate.Severity.MergeStrategy))

		if apiModel.IncidentTemplate.Severity.Binding != nil {
			binding := IncidentEngineParamBinding{}.FromAPI(*apiModel.IncidentTemplate.Severity.Binding)
			result.IncidentTemplate.Severity.Binding = &binding
		}
	}

	if apiModel.IncidentTemplate.IncidentMode != nil && apiModel.IncidentTemplate.IncidentMode.Binding != nil {
		binding := IncidentEngineParamBinding{}.FromAPI(*apiModel.IncidentTemplate.IncidentMode.Binding)
		result.IncidentTemplate.IncidentMode = &binding
	}

	if apiModel.IncidentTemplate.IncidentType != nil && apiModel.IncidentTemplate.IncidentType.Binding != nil {
		binding := IncidentEngineParamBinding{}.FromAPI(*apiModel.IncidentTemplate.IncidentType.Binding)
		result.IncidentTemplate.IncidentType = &binding
	}

	if apiModel.IncidentTemplate.StartInTriage != nil && apiModel.IncidentTemplate.StartInTriage.Binding != nil {
		binding := IncidentEngineParamBinding{}.FromAPI(*apiModel.IncidentTemplate.StartInTriage.Binding)
		result.IncidentTemplate.StartInTriage = &binding
	}

	if apiModel.IncidentTemplate.Workspace != nil && apiModel.IncidentTemplate.Workspace.Binding != nil {
		binding := IncidentEngineParamBinding{}.FromAPI(*apiModel.IncidentTemplate.Workspace.Binding)
		result.IncidentTemplate.Workspace = &binding
	}

	// Initialize custom fields array
	result.IncidentTemplate.CustomFields = []AlertRouteCustomFieldModel{}

	// If we have custom fields in the API response, use those
	if apiModel.IncidentTemplate.CustomFields != nil && len(*apiModel.IncidentTemplate.CustomFields) > 0 {
		// Process custom fields from API
		for _, cf := range *apiModel.IncidentTemplate.CustomFields {
			model := AlertRouteCustomFieldModel{
				CustomFieldID: types.StringValue(cf.CustomFieldId),
				MergeStrategy: types.StringValue(string(cf.MergeStrategy)),
			}

			// Handle the binding with awareness of the plan to ensure consistency
			binding := IncidentEngineParamBinding{}.FromAPI(cf.Binding)

			// Always ensure the reference is initialized, even if null
			if binding.Value != nil && binding.Value.Reference.IsNull() {
				binding.Value.Reference = types.StringNull()
			}

			model.Binding = &binding

			result.IncidentTemplate.CustomFields = append(result.IncidentTemplate.CustomFields, model)
		}
	} else if plan != nil && plan.IncidentTemplate != nil && len(plan.IncidentTemplate.CustomFields) > 0 {
		// If the API didn't return custom fields but we have them in the plan, use those
		// We need to create fresh copies with normalized field values
		for _, cf := range plan.IncidentTemplate.CustomFields {
			model := AlertRouteCustomFieldModel{
				CustomFieldID: cf.CustomFieldID,
				MergeStrategy: cf.MergeStrategy,
			}

			// Deep copy the binding to normalize it
			if cf.Binding != nil {
				bindingCopy := *cf.Binding // make a copy of the binding

				model.Binding = &bindingCopy
			}

			result.IncidentTemplate.CustomFields = append(result.IncidentTemplate.CustomFields, model)
		}
		fmt.Printf("Using custom fields from plan: %d\n", len(plan.IncidentTemplate.CustomFields))
	}

	return result
}

func createAutoGeneratedBinding(binding *IncidentEngineParamBinding, autogenerated types.Bool) client.AlertRouteAutoGeneratedTemplateBindingPayloadV2 {
	result := client.AlertRouteAutoGeneratedTemplateBindingPayloadV2{}

	if !autogenerated.IsNull() && !autogenerated.IsUnknown() {
		result.Autogenerated = lo.ToPtr(autogenerated.ValueBool())
	} else {
		result.Autogenerated = lo.ToPtr(false)
	}

	if binding == nil {
		emptyBinding := client.EngineParamBindingPayloadV2{
			ArrayValue: &[]client.EngineParamBindingValuePayloadV2{},
		}
		result.Binding = &emptyBinding
	} else {
		bindingPayload := binding.ToPayload()
		result.Binding = &bindingPayload
	}

	return result
}

// AutoGeneratedParamBindingAttributes returns a resource schema definition for autogenerated parameter bindings.
func AutoGeneratedParamBindingAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"autogenerated": schema.BoolAttribute{
			Optional:            true,
			Computed:            true,
			MarkdownDescription: "Whether this attribute should be autogenerated using AI",
		},
		"array_value": schema.ListNestedAttribute{
			MarkdownDescription: "The array of literal or reference parameter values",
			Optional:            true,
			Computed:            true,
			NestedObject: schema.NestedAttributeObject{
				Attributes: ParamBindingValueAttributes(),
			},
		},
		"value": schema.SingleNestedAttribute{
			MarkdownDescription: "The literal or reference parameter value",
			Optional:            true,
			Computed:            true,
			Attributes:          ParamBindingValueAttributes(),
		},
	}
}

func (m AlertRouteResourceModel) ToCreatePayload() client.AlertRoutesCreatePayloadV2 {
	payload := client.AlertRoutesCreatePayloadV2{
		Name:            m.Name.ValueString(),
		Enabled:         m.Enabled.ValueBool(),
		IsPrivate:       m.IsPrivate.ValueBool(),
		Version:         0, // Initial version
		AlertSources:    []client.AlertRouteAlertSourcePayloadV2{},
		ChannelConfig:   []client.AlertRouteChannelConfigPayloadV2{},
		ConditionGroups: []client.ConditionGroupPayloadV2{},
		Expressions:     []client.ExpressionPayloadV2{},
		EscalationConfig: client.AlertRouteEscalationConfigPayloadV2{
			AutoCancelEscalations: false,
			EscalationTargets:     []client.AlertRouteEscalationTargetPayloadV2{},
		},
		IncidentConfig: client.AlertRouteIncidentConfigPayloadV2{
			AutoDeclineEnabled: false,
			ConditionGroups:    []client.ConditionGroupPayloadV2{},
			DeferTimeSeconds:   0,
			GroupingKeys:       []client.GroupingKeyV2{},
		},
		IncidentTemplate: client.AlertRouteIncidentTemplatePayloadV2{},
	}

	alertSources := []client.AlertRouteAlertSourcePayloadV2{}
	for _, src := range m.AlertSources {
		alertSource := client.AlertRouteAlertSourcePayloadV2{
			AlertSourceId:   src.AlertSourceID.ValueString(),
			ConditionGroups: src.ConditionGroups.ToPayload(),
		}

		alertSources = append(alertSources, alertSource)
	}
	payload.AlertSources = alertSources

	channelConfigs := []client.AlertRouteChannelConfigPayloadV2{}
	for _, config := range m.ChannelConfig {
		channelConfig := client.AlertRouteChannelConfigPayloadV2{
			ConditionGroups: config.ConditionGroups.ToPayload(),
		}

		if config.SlackTargets != nil && config.SlackTargets.Binding != nil {
			channelConfig.SlackTargets = &client.AlertRouteChannelTargetPayloadV2{
				ChannelVisibility: config.SlackTargets.ChannelVisibility.ValueString(),
				Binding:           config.SlackTargets.Binding.ToPayload(),
			}
		}

		if config.MsTeamsTargets != nil && config.MsTeamsTargets.Binding != nil {
			channelConfig.MsTeamsTargets = &client.AlertRouteChannelTargetPayloadV2{
				ChannelVisibility: config.MsTeamsTargets.ChannelVisibility.ValueString(),
				Binding:           config.MsTeamsTargets.Binding.ToPayload(),
			}
		}

		channelConfigs = append(channelConfigs, channelConfig)
	}
	payload.ChannelConfig = channelConfigs

	payload.ConditionGroups = m.ConditionGroups.ToPayload()

	if len(m.Expressions) > 0 {
		payload.Expressions = m.Expressions.ToPayload()
	} else {
		payload.Expressions = []client.ExpressionPayloadV2{}
	}

	if m.EscalationConfig != nil {
		payload.EscalationConfig = client.AlertRouteEscalationConfigPayloadV2{
			AutoCancelEscalations: m.EscalationConfig.AutoCancelEscalations.ValueBool(),
			EscalationTargets:     []client.AlertRouteEscalationTargetPayloadV2{},
		}

		for _, target := range m.EscalationConfig.EscalationTargets {
			escalationTarget := client.AlertRouteEscalationTargetPayloadV2{}

			if target.Users != nil {
				userBinding := target.Users.ToPayload()
				escalationTarget.Users = &userBinding
			}

			if target.EscalationPaths != nil {
				pathBinding := target.EscalationPaths.ToPayload()
				escalationTarget.EscalationPaths = &pathBinding
			}

			payload.EscalationConfig.EscalationTargets = append(payload.EscalationConfig.EscalationTargets, escalationTarget)
		}
	}

	if m.IncidentConfig != nil {
		payload.IncidentConfig = client.AlertRouteIncidentConfigPayloadV2{
			AutoDeclineEnabled: m.IncidentConfig.AutoDeclineEnabled.ValueBool(),
			DeferTimeSeconds:   m.IncidentConfig.DeferTimeSeconds.ValueInt64(),
			Enabled:            m.IncidentConfig.Enabled.ValueBool(),
			ConditionGroups:    m.IncidentConfig.ConditionGroups.ToPayload(),
			GroupingKeys:       []client.GroupingKeyV2{},
		}

		for _, gk := range m.IncidentConfig.GroupingKeys {
			groupingKey := client.GroupingKeyV2{
				Reference: gk.Reference.ValueString(),
			}

			payload.IncidentConfig.GroupingKeys = append(payload.IncidentConfig.GroupingKeys, groupingKey)
		}
	}

	if m.IncidentTemplate != nil {
		incidentTemplate := client.AlertRouteIncidentTemplatePayloadV2{}

		if m.IncidentTemplate.Name != nil {
			nameParamBinding := m.IncidentTemplate.Name.ToParamBinding()
			incidentTemplate.Name = createAutoGeneratedBinding(&nameParamBinding, m.IncidentTemplate.Name.Autogenerated)
		}

		if m.IncidentTemplate.Summary != nil {
			summaryParamBinding := m.IncidentTemplate.Summary.ToParamBinding()
			summaryPayload := createAutoGeneratedBinding(&summaryParamBinding, m.IncidentTemplate.Summary.Autogenerated)
			incidentTemplate.Summary = &summaryPayload
		} else {
			emptyBinding := createAutoGeneratedBinding(nil, types.BoolValue(false))
			incidentTemplate.Summary = &emptyBinding
		}

		if m.IncidentTemplate.IncidentMode != nil {
			incidentModePayload := &client.AlertRouteTemplateBindingPayloadV2{}
			incidentModeBinding := m.IncidentTemplate.IncidentMode.ToPayload()
			incidentModePayload.Binding = &incidentModeBinding
			incidentTemplate.IncidentMode = incidentModePayload
		}

		if m.IncidentTemplate.IncidentType != nil {
			incidentTypePayload := &client.AlertRouteTemplateBindingPayloadV2{}
			incidentTypeBinding := m.IncidentTemplate.IncidentType.ToPayload()
			incidentTypePayload.Binding = &incidentTypeBinding
			incidentTemplate.IncidentType = incidentTypePayload
		}

		if m.IncidentTemplate.StartInTriage != nil {
			startInTriagePayload := &client.AlertRouteTemplateBindingPayloadV2{}
			startInTriageBinding := m.IncidentTemplate.StartInTriage.ToPayload()
			startInTriagePayload.Binding = &startInTriageBinding
			incidentTemplate.StartInTriage = startInTriagePayload
		}

		if m.IncidentTemplate.Workspace != nil {
			workspacePayload := &client.AlertRouteTemplateBindingPayloadV2{}
			workspaceBinding := m.IncidentTemplate.Workspace.ToPayload()
			workspacePayload.Binding = &workspaceBinding
			incidentTemplate.Workspace = workspacePayload
		}

		if m.IncidentTemplate.Severity != nil {
			severityPayload := &client.AlertRouteSeverityBindingPayloadV2{
				MergeStrategy: client.AlertRouteSeverityBindingPayloadV2MergeStrategy(m.IncidentTemplate.Severity.MergeStrategy.ValueString()),
			}

			if m.IncidentTemplate.Severity.Binding != nil {
				severityBinding := m.IncidentTemplate.Severity.Binding.ToPayload()
				severityPayload.Binding = &severityBinding
			}

			incidentTemplate.Severity = severityPayload
		}

		customFields := []client.AlertRouteCustomFieldBindingPayloadV2{}

		if m.IncidentTemplate.CustomFields != nil {
			for _, cf := range m.IncidentTemplate.CustomFields {
				if cf.Binding != nil {
					binding := cf.Binding.ToPayload()

					// Ensure values are properly normalized before creating payload
					if binding.Value != nil && binding.Value.Reference == nil {
						binding.Value.Reference = nil
					}

					// Create the custom field payload
					customField := client.AlertRouteCustomFieldBindingPayloadV2{
						CustomFieldId: cf.CustomFieldID.ValueString(),
						Binding:       binding,
						MergeStrategy: client.AlertRouteCustomFieldBindingPayloadV2MergeStrategy(cf.MergeStrategy.ValueString()),
					}

					customFields = append(customFields, customField)
				}
			}
		}

		incidentTemplate.CustomFields = &customFields

		payload.IncidentTemplate = incidentTemplate
	}

	return payload
}

func (m AlertRouteResourceModel) ToUpdatePayload() client.AlertRoutesUpdatePayloadV2 {
	createPayload := m.ToCreatePayload()

	if createPayload.Expressions == nil {
		createPayload.Expressions = []client.ExpressionPayloadV2{}
	}

	updatePayload := client.AlertRoutesUpdatePayloadV2{
		Name:             createPayload.Name,
		Enabled:          createPayload.Enabled,
		IsPrivate:        createPayload.IsPrivate,
		AlertSources:     createPayload.AlertSources,
		ChannelConfig:    createPayload.ChannelConfig,
		ConditionGroups:  createPayload.ConditionGroups,
		Expressions:      createPayload.Expressions,
		EscalationConfig: createPayload.EscalationConfig,
		IncidentConfig:   createPayload.IncidentConfig,
		IncidentTemplate: createPayload.IncidentTemplate,
	}

	if updatePayload.Expressions == nil {
		updatePayload.Expressions = []client.ExpressionPayloadV2{}
	}

	return updatePayload
}
