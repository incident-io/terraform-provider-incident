package models

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/incident-io/terraform-provider-incident/internal/client"
	"github.com/samber/lo"
)

type AlertRouteResourceModel struct {
	ID        types.String `tfsdk:"id"`
	Name      types.String `tfsdk:"name"`
	Enabled   types.Bool   `tfsdk:"enabled"`
	IsPrivate types.Bool   `tfsdk:"is_private"`

	AlertSources     []AlertRouteAlertSourceModel     `tfsdk:"alert_sources"`
	ChannelConfig    []AlertRouteChannelConfigModel   `tfsdk:"channel_config"`
	ConditionGroups  IncidentEngineConditionGroups    `tfsdk:"condition_groups"`
	Expressions      IncidentEngineExpressions        `tfsdk:"expressions"`
	EscalationConfig *AlertRouteEscalationConfigModel `tfsdk:"escalation_config"`
	IncidentConfig   *AlertRouteIncidentConfigModel   `tfsdk:"incident_config"`
	IncidentTemplate *AlertRouteIncidentTemplateModel `tfsdk:"incident_template"`
}

type AlertRouteAlertSourceModel struct {
	AlertSourceID   types.String                  `tfsdk:"alert_source_id"`
	ConditionGroups IncidentEngineConditionGroups `tfsdk:"condition_groups"`
}

type AlertRouteChannelConfigModel struct {
	ConditionGroups IncidentEngineConditionGroups `tfsdk:"condition_groups"`
	MsTeamsTargets  *AlertRouteChannelTargetModel `tfsdk:"ms_teams_targets"`
	SlackTargets    *AlertRouteChannelTargetModel `tfsdk:"slack_targets"`
}

type AlertRouteChannelTargetModel struct {
	Binding           *IncidentEngineParamBinding `tfsdk:"binding"`
	ChannelVisibility types.String                `tfsdk:"channel_visibility"`
}

type AlertRouteEscalationConfigModel struct {
	AutoCancelEscalations types.Bool                        `tfsdk:"auto_cancel_escalations"`
	EscalationTargets     []AlertRouteEscalationTargetModel `tfsdk:"escalation_targets"`
}

type AlertRouteEscalationTargetModel struct {
	EscalationPaths *IncidentEngineParamBinding `tfsdk:"escalation_paths"`
	Users           *IncidentEngineParamBinding `tfsdk:"users"`
}

type AlertRouteIncidentConfigModel struct {
	AutoDeclineEnabled types.Bool                    `tfsdk:"auto_decline_enabled"`
	ConditionGroups    IncidentEngineConditionGroups `tfsdk:"condition_groups"`
	DeferTimeSeconds   types.Int64                   `tfsdk:"defer_time_seconds"`
	Enabled            types.Bool                    `tfsdk:"enabled"`
	GroupingKeys       []AlertRouteGroupingKey       `tfsdk:"grouping_keys"`
}

type AlertRouteGroupingKey struct {
	ID        types.String             `tfsdk:"id"`
	Reference *IncidentEngineReference `tfsdk:"reference"`
}

type IncidentEngineReference struct {
	Array types.Bool   `tfsdk:"array"`
	Key   types.String `tfsdk:"key"`
	Label types.String `tfsdk:"label"`
	Type  types.String `tfsdk:"type"`
}

type AlertRouteIncidentTemplateModel struct {
	CustomFields         []AlertRouteCustomFieldModel `tfsdk:"custom_fields"`
	IncidentMode         *IncidentEngineParamBinding  `tfsdk:"incident_mode"`
	IncidentType         *IncidentEngineParamBinding  `tfsdk:"incident_type"`
	Name                 *IncidentEngineParamBinding  `tfsdk:"name"`
	NameAutogenerated    types.Bool                   `tfsdk:"name_autogenerated"`
	Severity             *AlertRouteSeverityModel     `tfsdk:"severity"`
	StartInTriage        *IncidentEngineParamBinding  `tfsdk:"start_in_triage"`
	Summary              *IncidentEngineParamBinding  `tfsdk:"summary"`
	SummaryAutogenerated types.Bool                   `tfsdk:"summary_autogenerated"`
	Workspace            *IncidentEngineParamBinding  `tfsdk:"workspace"`
}

type AlertRouteSeverityModel struct {
	MergeStrategy types.String                `tfsdk:"merge_strategy"`
	Binding       *IncidentEngineParamBinding `tfsdk:"binding"`
}

type AlertRouteCustomFieldModel struct {
	CustomFieldID types.String                `tfsdk:"custom_field_id"`
	Binding       *IncidentEngineParamBinding `tfsdk:"binding"`
}

func (AlertRouteResourceModel) FromAPI(apiModel client.AlertRouteV2) AlertRouteResourceModel {
	result := AlertRouteResourceModel{}

	result.Expressions = IncidentEngineExpressions{}

	if apiModel.Id != nil {
		result.ID = types.StringValue(*apiModel.Id)
	}

	if apiModel.Name != nil {
		result.Name = types.StringValue(*apiModel.Name)
	}

	if apiModel.Enabled != nil {
		result.Enabled = types.BoolValue(*apiModel.Enabled)
	}

	if apiModel.IsPrivate != nil {
		result.IsPrivate = types.BoolValue(*apiModel.IsPrivate)
	}

	// Version is no longer tracked in the model

	// Convert alert sources
	if apiModel.AlertSources != nil {
		for _, alertSource := range *apiModel.AlertSources {
			model := AlertRouteAlertSourceModel{
				AlertSourceID: types.StringValue(alertSource.AlertSourceId),
			}

			// Convert condition groups
			if alertSource.ConditionGroups != nil {
				model.ConditionGroups = IncidentEngineConditionGroups{}.FromAPI(alertSource.ConditionGroups)
			} else {
				// Ensure we return an empty array instead of null
				model.ConditionGroups = IncidentEngineConditionGroups{}
			}

			result.AlertSources = append(result.AlertSources, model)
		}
	} else {
		// Ensure we return an empty array instead of null
		result.AlertSources = []AlertRouteAlertSourceModel{}
	}

	// Convert channel config
	if apiModel.ChannelConfig != nil {
		for _, channelConfig := range *apiModel.ChannelConfig {
			model := AlertRouteChannelConfigModel{}

			// Convert condition groups - ensure initialized even if null
			if channelConfig.ConditionGroups != nil {
				model.ConditionGroups = IncidentEngineConditionGroups{}.FromAPI(channelConfig.ConditionGroups)
			} else {
				model.ConditionGroups = IncidentEngineConditionGroups{}
			}

			// Convert slack targets
			if channelConfig.SlackTargets != nil {
				binding := IncidentEngineParamBinding{}.FromAPI(channelConfig.SlackTargets.Binding)
				model.SlackTargets = &AlertRouteChannelTargetModel{
					ChannelVisibility: types.StringValue(channelConfig.SlackTargets.ChannelVisibility),
					Binding:           &binding,
				}
			}

			// Convert MS Teams targets
			if channelConfig.MsTeamsTargets != nil {
				binding := IncidentEngineParamBinding{}.FromAPI(channelConfig.MsTeamsTargets.Binding)
				model.MsTeamsTargets = &AlertRouteChannelTargetModel{
					ChannelVisibility: types.StringValue(channelConfig.MsTeamsTargets.ChannelVisibility),
					Binding:           &binding,
				}
			}

			result.ChannelConfig = append(result.ChannelConfig, model)
		}
	} else {
		// Ensure we return an empty array instead of null
		result.ChannelConfig = []AlertRouteChannelConfigModel{}
	}

	// Convert top-level condition groups - use engine model
	if apiModel.ConditionGroups != nil {
		result.ConditionGroups = IncidentEngineConditionGroups{}.FromAPI(*apiModel.ConditionGroups)
	} else {
		// Ensure we return an empty array instead of null
		result.ConditionGroups = IncidentEngineConditionGroups{}
	}

	// Convert expressions - use engine model
	// ALWAYS set expressions to an initialized empty slice
	result.Expressions = IncidentEngineExpressions{}
	if apiModel.Expressions != nil && len(*apiModel.Expressions) > 0 {
		result.Expressions = IncidentEngineExpressions{}.FromAPI(*apiModel.Expressions)
	}

	// Convert escalation config
	if apiModel.EscalationConfig != nil {
		result.EscalationConfig = &AlertRouteEscalationConfigModel{
			AutoCancelEscalations: types.BoolValue(apiModel.EscalationConfig.AutoCancelEscalations),
			EscalationTargets:     []AlertRouteEscalationTargetModel{},
		}

		// Convert escalation targets
		if apiModel.EscalationConfig.EscalationTargets != nil {
			for _, target := range apiModel.EscalationConfig.EscalationTargets {
				model := AlertRouteEscalationTargetModel{}

				if target.Users != nil {
					binding := IncidentEngineParamBinding{}.FromAPI(*target.Users)
					model.Users = &binding
				}

				if target.EscalationPaths != nil {
					binding := IncidentEngineParamBinding{}.FromAPI(*target.EscalationPaths)
					model.EscalationPaths = &binding
				}

				result.EscalationConfig.EscalationTargets = append(result.EscalationConfig.EscalationTargets, model)
			}
		}
	}

	// Convert incident config
	if apiModel.IncidentConfig != nil {
		result.IncidentConfig = &AlertRouteIncidentConfigModel{
			AutoDeclineEnabled: types.BoolValue(apiModel.IncidentConfig.AutoDeclineEnabled),
			DeferTimeSeconds:   types.Int64Value(apiModel.IncidentConfig.DeferTimeSeconds),
			Enabled:            types.BoolValue(apiModel.IncidentConfig.Enabled),
			GroupingKeys:       []AlertRouteGroupingKey{},
		}

		// Convert grouping keys
		for _, gk := range apiModel.IncidentConfig.GroupingKeys {
			groupingKey := AlertRouteGroupingKey{
				ID: types.StringValue(gk.Id),
			}

			if gk.Reference != nil {
				ref := &IncidentEngineReference{
					Array: types.BoolValue(gk.Reference.Array),
					Key:   types.StringValue(gk.Reference.Key),
					Label: types.StringValue(gk.Reference.Label),
					Type:  types.StringValue(gk.Reference.Type),
				}

				groupingKey.Reference = ref
			}

			result.IncidentConfig.GroupingKeys = append(result.IncidentConfig.GroupingKeys, groupingKey)
		}

		// Convert condition groups - use engine model
		if apiModel.IncidentConfig.ConditionGroups != nil {
			result.IncidentConfig.ConditionGroups = IncidentEngineConditionGroups{}.FromAPI(apiModel.IncidentConfig.ConditionGroups)
		} else {
			// Ensure we return an empty array instead of null
			result.IncidentConfig.ConditionGroups = IncidentEngineConditionGroups{}
		}
	}

	// Convert incident template
	if apiModel.IncidentTemplate != nil {
		result.IncidentTemplate = &AlertRouteIncidentTemplateModel{
			CustomFields: []AlertRouteCustomFieldModel{},
		}

		if apiModel.IncidentTemplate.NameAutogenerated != nil {
			result.IncidentTemplate.NameAutogenerated = types.BoolValue(*apiModel.IncidentTemplate.NameAutogenerated)
		}

		if apiModel.IncidentTemplate.SummaryAutogenerated != nil {
			result.IncidentTemplate.SummaryAutogenerated = types.BoolValue(*apiModel.IncidentTemplate.SummaryAutogenerated)
		}

		// Convert bindings - use engine model for each
		if apiModel.IncidentTemplate.Name != nil {
			binding := IncidentEngineParamBinding{}.FromAPI(*apiModel.IncidentTemplate.Name)
			result.IncidentTemplate.Name = &binding
		}

		if apiModel.IncidentTemplate.Summary != nil {
			binding := IncidentEngineParamBinding{}.FromAPI(*apiModel.IncidentTemplate.Summary)
			result.IncidentTemplate.Summary = &binding
		}

		if apiModel.IncidentTemplate.IncidentMode != nil {
			binding := IncidentEngineParamBinding{}.FromAPI(*apiModel.IncidentTemplate.IncidentMode)
			result.IncidentTemplate.IncidentMode = &binding
		}

		if apiModel.IncidentTemplate.IncidentType != nil {
			binding := IncidentEngineParamBinding{}.FromAPI(*apiModel.IncidentTemplate.IncidentType)
			result.IncidentTemplate.IncidentType = &binding
		}
		// Removed default value since it causes inconsistency between what's returned by the API

		if apiModel.IncidentTemplate.StartInTriage != nil {
			binding := IncidentEngineParamBinding{}.FromAPI(*apiModel.IncidentTemplate.StartInTriage)
			result.IncidentTemplate.StartInTriage = &binding
		}

		if apiModel.IncidentTemplate.Workspace != nil {
			binding := IncidentEngineParamBinding{}.FromAPI(*apiModel.IncidentTemplate.Workspace)
			result.IncidentTemplate.Workspace = &binding
		}

		// Convert severity
		if apiModel.IncidentTemplate.Severity != nil {
			result.IncidentTemplate.Severity = &AlertRouteSeverityModel{
				MergeStrategy: types.StringValue(string(apiModel.IncidentTemplate.Severity.MergeStrategy)),
			}

			if apiModel.IncidentTemplate.Severity.Binding != nil {
				binding := IncidentEngineParamBinding{}.FromAPI(*apiModel.IncidentTemplate.Severity.Binding)
				result.IncidentTemplate.Severity.Binding = &binding
			}
		}

		// Convert custom fields
		if apiModel.IncidentTemplate.CustomFields != nil {
			for _, cf := range *apiModel.IncidentTemplate.CustomFields {
				model := AlertRouteCustomFieldModel{
					CustomFieldID: types.StringValue(cf.CustomFieldId),
				}

				// CustomFieldBinding has a Binding field that is a EngineParamBindingV2
				binding := IncidentEngineParamBinding{}.FromAPI(cf.Binding)
				model.Binding = &binding

				result.IncidentTemplate.CustomFields = append(result.IncidentTemplate.CustomFields, model)
			}
		}
	}

	return result
}

func (m AlertRouteResourceModel) ToCreatePayload() client.AlertRoutesCreatePayloadV2 {
	payload := client.AlertRoutesCreatePayloadV2{
		Name:            m.Name.ValueString(),
		Enabled:         m.Enabled.ValueBool(),
		IsPrivate:       m.IsPrivate.ValueBool(),
		Version:         0, // Initial version
		AlertSources:    []client.AlertRouteAlertSourcePayloadV2{},
		ChannelConfig:   []client.AlertRouteChannelConfigPayloadV2{},
		ConditionGroups: []client.ConditionGroupPayloadV2{},
		Expressions:     []client.ExpressionPayloadV2{},
		EscalationConfig: client.AlertRouteEscalationConfigPayloadV2{
			AutoCancelEscalations: false,
			EscalationTargets:     []client.AlertRouteEscalationTargetPayloadV2{},
		},
		IncidentConfig: client.AlertRouteIncidentConfigPayloadV2{
			AutoDeclineEnabled: false,
			ConditionGroups:    []client.ConditionGroupPayloadV2{},
			DeferTimeSeconds:   0,
			GroupingKeys:       []client.GroupingKeyV2{},
		},
		IncidentTemplate: client.AlertRouteIncidentTemplatePayloadV2{},
	}

	// Convert alert sources
	alertSources := []client.AlertRouteAlertSourcePayloadV2{}
	for _, src := range m.AlertSources {
		alertSource := client.AlertRouteAlertSourcePayloadV2{
			AlertSourceId:   src.AlertSourceID.ValueString(),
			ConditionGroups: src.ConditionGroups.ToPayload(),
		}

		alertSources = append(alertSources, alertSource)
	}
	payload.AlertSources = alertSources

	// Convert channel config
	channelConfigs := []client.AlertRouteChannelConfigPayloadV2{}
	for _, config := range m.ChannelConfig {
		channelConfig := client.AlertRouteChannelConfigPayloadV2{
			ConditionGroups: config.ConditionGroups.ToPayload(),
		}

		// Convert Slack targets
		if config.SlackTargets != nil && config.SlackTargets.Binding != nil {
			channelConfig.SlackTargets = &client.AlertRouteChannelTargetPayloadV2{
				ChannelVisibility: config.SlackTargets.ChannelVisibility.ValueString(),
				Binding:           config.SlackTargets.Binding.ToPayload(),
			}
		}

		// Convert MS Teams targets
		if config.MsTeamsTargets != nil && config.MsTeamsTargets.Binding != nil {
			channelConfig.MsTeamsTargets = &client.AlertRouteChannelTargetPayloadV2{
				ChannelVisibility: config.MsTeamsTargets.ChannelVisibility.ValueString(),
				Binding:           config.MsTeamsTargets.Binding.ToPayload(),
			}
		}

		channelConfigs = append(channelConfigs, channelConfig)
	}
	payload.ChannelConfig = channelConfigs

	// Convert condition groups and expressions using existing engine models
	payload.ConditionGroups = m.ConditionGroups.ToPayload()

	// For expressions, always ensure we return a non-null value
	if len(m.Expressions) > 0 {
		payload.Expressions = m.Expressions.ToPayload()
	} else {
		payload.Expressions = []client.ExpressionPayloadV2{}
	}

	// Convert escalation config
	if m.EscalationConfig != nil {
		payload.EscalationConfig = client.AlertRouteEscalationConfigPayloadV2{
			AutoCancelEscalations: m.EscalationConfig.AutoCancelEscalations.ValueBool(),
			EscalationTargets:     []client.AlertRouteEscalationTargetPayloadV2{},
		}

		// Convert escalation targets
		for _, target := range m.EscalationConfig.EscalationTargets {
			escalationTarget := client.AlertRouteEscalationTargetPayloadV2{}

			// We need to check if the binding is valid before converting
			if target.Users != nil {
				userBinding := target.Users.ToPayload()
				escalationTarget.Users = &userBinding
			}

			if target.EscalationPaths != nil {
				pathBinding := target.EscalationPaths.ToPayload()
				escalationTarget.EscalationPaths = &pathBinding
			}

			payload.EscalationConfig.EscalationTargets = append(payload.EscalationConfig.EscalationTargets, escalationTarget)
		}
	}

	// Convert incident config
	if m.IncidentConfig != nil {
		payload.IncidentConfig = client.AlertRouteIncidentConfigPayloadV2{
			AutoDeclineEnabled: m.IncidentConfig.AutoDeclineEnabled.ValueBool(),
			DeferTimeSeconds:   m.IncidentConfig.DeferTimeSeconds.ValueInt64(),
			Enabled:            m.IncidentConfig.Enabled.ValueBool(),
			ConditionGroups:    m.IncidentConfig.ConditionGroups.ToPayload(),
			GroupingKeys:       []client.GroupingKeyV2{},
		}

		// Convert grouping keys
		for _, gk := range m.IncidentConfig.GroupingKeys {
			groupingKey := client.GroupingKeyV2{
				Id: gk.ID.ValueString(),
			}

			// Convert reference if present
			if gk.Reference != nil {
				ref := &client.EngineReferenceV2{
					Array: gk.Reference.Array.ValueBool(),
					Key:   gk.Reference.Key.ValueString(),
					Label: gk.Reference.Label.ValueString(),
					Type:  gk.Reference.Type.ValueString(),
				}

				groupingKey.Reference = ref
			}

			payload.IncidentConfig.GroupingKeys = append(payload.IncidentConfig.GroupingKeys, groupingKey)
		}
	}

	// Convert incident template
	if m.IncidentTemplate != nil {
		incidentTemplate := client.AlertRouteIncidentTemplatePayloadV2{}

		// Convert basic fields
		if !m.IncidentTemplate.NameAutogenerated.IsNull() {
			incidentTemplate.NameAutogenerated = lo.ToPtr(m.IncidentTemplate.NameAutogenerated.ValueBool())
		}

		if !m.IncidentTemplate.SummaryAutogenerated.IsNull() {
			incidentTemplate.SummaryAutogenerated = lo.ToPtr(m.IncidentTemplate.SummaryAutogenerated.ValueBool())
		}

		// Convert bindings
		// Get the binding values directly from the model
		if m.IncidentTemplate.Name != nil {
			nameBinding := m.IncidentTemplate.Name.ToPayload()
			incidentTemplate.Name = &nameBinding
		}

		if m.IncidentTemplate.Summary != nil {
			summaryBinding := m.IncidentTemplate.Summary.ToPayload()
			incidentTemplate.Summary = &summaryBinding
		}

		if m.IncidentTemplate.IncidentMode != nil {
			incidentModeBinding := m.IncidentTemplate.IncidentMode.ToPayload()
			incidentTemplate.IncidentMode = &incidentModeBinding
		}

		if m.IncidentTemplate.IncidentType != nil {
			incidentTypeBinding := m.IncidentTemplate.IncidentType.ToPayload()
			incidentTemplate.IncidentType = &incidentTypeBinding
		}
		// Removed default value to ensure consistency with API

		if m.IncidentTemplate.StartInTriage != nil {
			startInTriageBinding := m.IncidentTemplate.StartInTriage.ToPayload()
			incidentTemplate.StartInTriage = &startInTriageBinding
		}

		if m.IncidentTemplate.Workspace != nil {
			workspaceBinding := m.IncidentTemplate.Workspace.ToPayload()
			incidentTemplate.Workspace = &workspaceBinding
		}

		// Convert severity
		if m.IncidentTemplate.Severity != nil {
			severityPayload := &client.AlertRouteSeverityBindingPayloadV2{
				MergeStrategy: client.AlertRouteSeverityBindingPayloadV2MergeStrategy(m.IncidentTemplate.Severity.MergeStrategy.ValueString()),
			}

			// Only add binding if it's provided
			if m.IncidentTemplate.Severity.Binding != nil {
				severityBinding := m.IncidentTemplate.Severity.Binding.ToPayload()
				severityPayload.Binding = &severityBinding
			}

			incidentTemplate.Severity = severityPayload
		}

		// Convert custom fields
		customFields := []client.AlertRouteCustomFieldBindingPayloadV2{}
		for _, cf := range m.IncidentTemplate.CustomFields {
			if cf.Binding != nil {
				binding := cf.Binding.ToPayload()

				customField := client.AlertRouteCustomFieldBindingPayloadV2{
					CustomFieldId: cf.CustomFieldID.ValueString(),
					Binding:       binding,
				}

				customFields = append(customFields, customField)
			}
		}

		if len(customFields) > 0 {
			incidentTemplate.CustomFields = &customFields
		}

		payload.IncidentTemplate = incidentTemplate
	}

	return payload
}

func (m AlertRouteResourceModel) ToUpdatePayload() client.AlertRoutesUpdatePayloadV2 {
	createPayload := m.ToCreatePayload()

	if createPayload.Expressions == nil {
		createPayload.Expressions = []client.ExpressionPayloadV2{}
	}

	// Build the update payload without version - version will be added by the Update method
	updatePayload := client.AlertRoutesUpdatePayloadV2{
		Name:             createPayload.Name,
		Enabled:          createPayload.Enabled,
		IsPrivate:        createPayload.IsPrivate,
		AlertSources:     createPayload.AlertSources,
		ChannelConfig:    createPayload.ChannelConfig,
		ConditionGroups:  createPayload.ConditionGroups,
		Expressions:      createPayload.Expressions,
		EscalationConfig: createPayload.EscalationConfig,
		IncidentConfig:   createPayload.IncidentConfig,
		IncidentTemplate: createPayload.IncidentTemplate,
	}

	// Double-check for null values
	if updatePayload.Expressions == nil {
		updatePayload.Expressions = []client.ExpressionPayloadV2{}
	}

	return updatePayload
}
