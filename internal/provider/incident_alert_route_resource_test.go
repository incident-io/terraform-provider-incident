package provider

import (
	"fmt"
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"
)

func TestAccIncidentAlertRouteResource(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create and Read testing
			{
				Config: testAccIncidentAlertRouteResourceConfig("test-route"),
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestMatchResourceAttr("incident_alert_route.test", "id", regexp.MustCompile("^[a-zA-Z0-9]+$")),
					resource.TestCheckResourceAttr("incident_alert_route.test", "name", "test-route"),
					resource.TestCheckResourceAttr("incident_alert_route.test", "enabled", "true"),
					resource.TestCheckResourceAttr("incident_alert_route.test", "is_private", "false"),
				),
			},
			{
				RefreshState: true,
				PlanOnly:     true,
				RefreshPlanChecks: resource.RefreshPlanChecks{
					PostRefresh: []plancheck.PlanCheck{
						plancheck.ExpectEmptyPlan(),
					},
				},

				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("incident_alert_route.test", "name", "test-route"),
					resource.TestCheckResourceAttr("incident_alert_route.test", "enabled", "true"),
					resource.TestCheckResourceAttr("incident_alert_route.test", "is_private", "false"),
				),
			},
			// ImportState testing
			{
				ResourceName:      "incident_alert_route.test",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Update testing
			{
				Config: testAccIncidentAlertRouteResourceConfig("test-route-updated"),
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("incident_alert_route.test", "name", "test-route-updated"),
				),
			},
		},
	})
}

func TestAccIncidentAlertRouteResourceComprehensive(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create and Read testing with comprehensive configuration
			{
				Config: testAccIncidentAlertRouteResourceConfigComprehensive("comprehensive-test-route"),
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestMatchResourceAttr("incident_alert_route.comprehensive", "id", regexp.MustCompile("^[a-zA-Z0-9]+$")),
					resource.TestCheckResourceAttr("incident_alert_route.comprehensive", "name", "comprehensive-test-route"),
					resource.TestCheckResourceAttr("incident_alert_route.comprehensive", "enabled", "true"),
					resource.TestCheckResourceAttr("incident_alert_route.comprehensive", "is_private", "false"),

					// Check alert sources
					resource.TestCheckResourceAttrSet("incident_alert_route.comprehensive", "alert_sources.0.alert_source_id"),

					// Check condition groups
					resource.TestCheckResourceAttr("incident_alert_route.comprehensive", "condition_groups.0.conditions.0.subject", "alert.title"),
					resource.TestCheckResourceAttr("incident_alert_route.comprehensive", "condition_groups.0.conditions.0.operation", "is_set"),

					// Check incident config
					resource.TestCheckResourceAttr("incident_alert_route.comprehensive", "incident_config.auto_decline_enabled", "false"),
					resource.TestCheckResourceAttr("incident_alert_route.comprehensive", "incident_config.enabled", "true"),
					resource.TestCheckResourceAttr("incident_alert_route.comprehensive", "incident_config.defer_time_seconds", "300"),

					// Check incident template
					resource.TestCheckResourceAttr("incident_alert_route.comprehensive", "incident_template.name.autogenerated", "true"),
					resource.TestCheckResourceAttrSet("incident_alert_route.comprehensive", "incident_template.name.value.literal"),
					resource.TestCheckResourceAttr("incident_alert_route.comprehensive", "incident_template.summary.autogenerated", "true"),
					resource.TestCheckResourceAttrSet("incident_alert_route.comprehensive", "incident_template.summary.value.literal"),
					resource.TestCheckResourceAttr("incident_alert_route.comprehensive", "incident_template.start_in_triage.value.literal", "true"),
					resource.TestCheckResourceAttr("incident_alert_route.comprehensive", "incident_template.severity.merge_strategy", "first-wins"),

					// Verify custom field was created and has the correct merge strategy
					resource.TestCheckResourceAttrSet("incident_custom_field.type_field", "id"),
					resource.TestCheckResourceAttr("incident_alert_route.comprehensive", "incident_template.custom_fields.0.merge_strategy", "first-wins"),
					resource.TestCheckResourceAttr("incident_alert_route.comprehensive", "incident_template.custom_fields.0.binding.value.literal", "Test incident"),
				),
			},
			// ImportState testing
			{
				ResourceName:      "incident_alert_route.comprehensive",
				ImportState:       true,
				ImportStateVerify: true,
			},
			// Update testing
			{
				Config: testAccIncidentAlertRouteResourceConfigComprehensive("comprehensive-test-route-updated"),
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("incident_alert_route.comprehensive", "name", "comprehensive-test-route-updated"),
				),
			},
		},
	})
}

func TestAccIncidentAlertRouteResourceAutoGeneratedFields(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccIncidentAlertRouteResourceConfigAutoGenerated("auto-gen-test", true),
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestMatchResourceAttr("incident_alert_route.auto_gen", "id", regexp.MustCompile("^[a-zA-Z0-9]+$")),
					resource.TestCheckResourceAttr("incident_alert_route.auto_gen", "name", "auto-gen-test"),

					resource.TestCheckResourceAttr("incident_alert_route.auto_gen", "incident_template.name.autogenerated", "true"),
					resource.TestCheckResourceAttr("incident_alert_route.auto_gen", "incident_template.summary.autogenerated", "true"),
				),
			},
			{
				Config: testAccIncidentAlertRouteResourceConfigAutoGenerated("auto-gen-test", false),
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("incident_alert_route.auto_gen", "incident_template.name.autogenerated", "false"),
					resource.TestCheckResourceAttr("incident_alert_route.auto_gen", "incident_template.summary.autogenerated", "false"),
				),
			},
		},
	})
}

func testAccIncidentAlertRouteResourceConfig(name string) string {
	return fmt.Sprintf(`
resource "incident_alert_route" "test" {
  name = %[1]q
  enabled = true
  is_private = false

  alert_sources = []
  channel_config = []
  condition_groups = []
  expressions = []

  escalation_config = {
    auto_cancel_escalations = true
    escalation_targets = []
  }

  incident_config = {
    auto_decline_enabled = true
    condition_groups     = []
    defer_time_seconds   = 0
    grouping_keys        = []
	enabled              = true
  }

  incident_template = {
    name = {
      autogenerated = false
      value = {
        literal = jsonencode({
          content = [
            {
              content = [
                {
                  attrs = {
                    label   = "Alert → Title"
                    missing = false
                    name    = "alert.title"
                  }
                  type = "varSpec"
                }
              ]
              type = "paragraph"
            }
          ]
          type = "doc"
        })
      }
    }

	summary = {
		autogenerated = false
		value = {
			literal = jsonencode({
				content = [
					{
						content = [
							{
								attrs = {
									label   = "Alert → Description"
									missing = false
									name    = "alert.description"
								}
								type = "varSpec"
							}
						]
						type = "paragraph"
					}
				]
				type = "doc"
			})
		}
	}

	custom_fields = []

	severity = {
      merge_strategy = "first-wins"
	}
  }
}
`, name)
}

func testAccIncidentAlertRouteResourceConfigAutoGenerated(name string, autogenerated bool) string {
	return fmt.Sprintf(`
resource "incident_alert_source" "auto_gen_test" {
  name        = "Auto Generated Test Source %[1]s"
  source_type = "http"
  template = {
    title = {
      literal = jsonencode({
        content = [
          {
            content = [
              {
                attrs = {
                  label   = "Payload → Title"
                  missing = false
                  name    = "title"
                }
                type = "varSpec"
              },
            ]
            type = "paragraph"
          },
        ]
        type = "doc"
      })
    }
    description = {
      literal = jsonencode({
        content = [
          {
            content = [
              {
                attrs = {
                  label   = "Payload → Description"
                  missing = false
                  name    = "description"
                }
                type = "varSpec"
              },
            ]
            type = "paragraph"
          },
        ]
        type = "doc"
      })
    }
    attributes  = []
    expressions = []
  }
}

resource "incident_alert_route" "auto_gen" {
  name       = %[1]q
  enabled    = true
  is_private = false

  alert_sources = [
    {
      alert_source_id = incident_alert_source.auto_gen_test.id
      condition_groups = []
    }
  ]

  condition_groups = []
  expressions = []
  channel_config = []

  escalation_config = {
    auto_cancel_escalations = true
    escalation_targets = []
  }

  incident_config = {
    auto_decline_enabled = false
    enabled              = true
    condition_groups     = []
    defer_time_seconds   = 300
    grouping_keys        = []
  }

  incident_template = {
    custom_fields = []
    name = {
      autogenerated = %[2]t
      value = {
        literal = jsonencode({
          content = [
            {
              content = [
                {
                  attrs = {
                    label   = "Alert → Title"
                    missing = false
                    name    = "alert.title"
                  }
                  type = "varSpec"
                }
              ]
              type = "paragraph"
            }
          ]
          type = "doc"
        })
      }
    }
    summary = {
      autogenerated = %[2]t
      value = {
        literal = jsonencode({
          content = [
            {
              content = [
                {
                  attrs = {
                    label   = "Alert → Description"
                    missing = false
                    name    = "alert.description"
                  }
                  type = "varSpec"
                }
              ]
              type = "paragraph"
            }
          ]
          type = "doc"
        })
      }
    }
    severity = {
      merge_strategy = "first-wins"
    }
  }
}
`, name, autogenerated)
}

func testAccIncidentAlertRouteResourceConfigComprehensive(name string) string {
	return fmt.Sprintf(`
resource "incident_custom_field" "type_field" {
  name        = "Test Type Field %[1]s"
  description = "The type of the incident."
  field_type  = "text"
}

resource "incident_alert_source" "http_test" {
  name        = "HTTP Test Alert Source %[1]s"
  source_type = "http"
  template = {
    title = {
      literal = jsonencode({
        content = [
          {
            content = [
              {
                attrs = {
                  label   = "Payload → Title"
                  missing = false
                  name    = "title"
                }
                type = "varSpec"
              },
            ]
            type = "paragraph"
          },
        ]
        type = "doc"
      })
    }
    description = {
      literal = jsonencode({
        content = [
          {
            content = [
              {
                attrs = {
                  label   = "Payload → Description"
                  missing = false
                  name    = "description"
                }
                type = "varSpec"
              },
            ]
            type = "paragraph"
          },
        ]
        type = "doc"
      })
    }
    attributes  = []
    expressions = []
  }
}

resource "incident_alert_route" "comprehensive" {
  name       = %[1]q
  enabled    = true
  is_private = false

  alert_sources = [
    {
      alert_source_id = incident_alert_source.http_test.id
      condition_groups = []
    }
  ]

  condition_groups = [
    {
      conditions = [
        {
          subject   = "alert.title"
          operation = "is_set"
          param_bindings = []
        }
      ]
    }
  ]

  expressions = []

  channel_config = []

  escalation_config = {
    auto_cancel_escalations = true
    escalation_targets = []
  }

  incident_config = {
    auto_decline_enabled = false
    enabled              = true
    condition_groups     = []
    defer_time_seconds   = 300
    grouping_keys        = []
  }

  incident_template = {
    custom_fields = [
      {
        custom_field_id = incident_custom_field.type_field.id
        merge_strategy = "first-wins"
        binding = {
          value = {
            literal = "Test incident"
          }
        }
      }
    ]
    name = {
      autogenerated = true
      value = {
        literal = jsonencode({
          content = [
            {
              content = [
                {
                  attrs = {
                    label   = "Alert → Title"
                    missing = false
                    name    = "alert.title"
                  }
                  type = "varSpec"
                }
              ]
              type = "paragraph"
            }
          ]
          type = "doc"
        })
      }
    }
    summary = {
      autogenerated = true
      value = {
        literal = jsonencode({
          content = [
            {
              content = [
                {
                  attrs = {
                    label   = "Alert → Description"
                    missing = false
                    name    = "alert.description"
                  }
                  type = "varSpec"
                }
              ]
              type = "paragraph"
            }
          ]
          type = "doc"
        })
      }
    }
    start_in_triage = {
      value = {
        literal = "true"
      }
    }
    severity = {
      merge_strategy = "first-wins"
    }
  }
}
`, name)
}
