resource "incident_alert_route" "service_alerts" {
  name       = "Testing Alert Routes"
  enabled    = true
  is_private = false

  // This references the ID of an alert source, condition groups are
  // used to specify the conditions under which the alert route will be triggered on
  // an alert source-basis
  alert_sources = [
    {
      alert_source_id = incident_alert_source.http.id
      condition_groups = [
        {
          conditions = [
            {
              subject        = "alert.title"
              operation      = "is_set"
              param_bindings = []
            }
          ]
        }
      ]
    }
  ]

  // The condition groups are used to specify the conditions under which the alert route will be triggered
  // on a whole-route basis
  condition_groups = [
    {
      conditions = [
        {
          subject        = "alert.title"
          operation      = "is_set"
          param_bindings = []
        }
      ]
    }
  ]

  expressions = []

  // Used to configure which Slack channels or Microsoft Teams teams should
  // be notified when an alert is received
  channel_config = [
    {
      // Define conditions under which this channel notification should occur
      condition_groups = [
        {
          conditions = [
            {
              subject        = "alert.title"
              operation      = "contains"
              param_bindings = [
                {
                  value = {
                    literal = "critical"
                  }
                }
              ]
            }
          ]
        }
      ]
      
      // Configure Slack channel notifications - set either slack_targets OR ms_teams_targets
      slack_targets = {
        // Define channels to notify, either with literal channel IDs or dynamic references
        binding = {
          array_value = [
            {
              literal = "C01234567" // Slack channel ID
            }
          ]
        }
        channel_visibility = "public"
      }
    }
  ]

  // Used to configure which escalation paths OR users should be notified when an alert is received
  // and the conditions under which they should be notified
  // auto_cancel_escalations is used to specify whether or not the escalation should be automatically cancelled
  // upon receiving a 'resolved' notification for the alert that triggered the escalation
  escalation_config = {
    auto_cancel_escalations = true
    escalation_targets = [
      {
        escalation_paths = {
          array_value = [
            {
              literal = "01JPQNFD3RWAAY2V83QQ80D1ZV"
            }
          ]
        }
      }
    ]
  }

  // Used to configure the incident creation settings for the alert route
  // auto-decline_enabled is used to specify whether or triage incidents should be automatically declined
  // when a resolved notification is received for the alert that triggered the incident
  // enabled is used to specify whether or not incidents should be created
  // condition_groups is used to specify the conditions under which the incident should be created
  // defer_time_seconds & grouping_keys are used to specify the defer time and grouping keys for alert
  // grouping
  incident_config = {
    auto_decline_enabled = false
    enabled              = true
    condition_groups     = []
    defer_time_seconds   = 300
    // grouping keys is an array of { reference = "alert.title" } which specifies the keys
    // that should be used to group alerts together when creating incidents
    grouping_keys = []
  }

  // Used to configure the incident template for the alert route
  incident_template = {

    // custom_fields is used to specify the custom fields that should be set on the incident
    // when it is created, the merge_strategy is used to specify how the custom field should be modified
    // when a new alert is received for the incident
    custom_fields = [
      {
        custom_field_id = incident_custom_field.type_field.id
        merge_strategy  = "first-wins"
        binding = {
          value = {
            literal = "Test incident"
          }
        }
      }
    ]

    name = {
      autogenerated = true
      value = {
        literal = jsonencode({
          content = [
            {
              content = [
                {
                  attrs = {
                    label   = "Alert → Title"
                    missing = false
                    name    = "alert.title"
                  }
                  type = "varSpec"
                }
              ]
              type = "paragraph"
            }
          ]
          type = "doc"
        })
      }
    }
    summary = {
      autogenerated = true
      value = {
        literal = jsonencode({
          content = [
            {
              content = [
                {
                  attrs = {
                    label   = "Alert → Description"
                    missing = false
                    name    = "alert.description"
                  }
                  type = "varSpec"
                }
              ]
              type = "paragraph"
            }
          ]
          type = "doc"
        })
      }
    }
    start_in_triage = {
      value = {
        literal = "true"
      }
    }
    severity = {
      merge_strategy = "first-wins"
    }
  }
}
